---
AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Automate deployment of OpenVPN Access Server with the following features:
  * Custom VPC CIDR
  * Security Group(s)
  * NACL
  * VPC Flow Logs
  * EC2 Systems Manager Ready

# Help for CloudFormation Metadata
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC NETWORKING
      Parameters:
      - VPCCIDR
    - Label:
        default: TAG PREFIX
      Parameters:
      - TagPrefixer
    - Label:
        default: OpenVPN AS INSTANCE
      Parameters:
      - InstanceSize
      - KeyName
      - OpenUse
    - Label:
        default: SECURITY & MONITORING
      Parameters:
      - OpenVPNASAccessIP
      - OpenVPNASAdminUser
      - OpenVPNASAdminPW
      - VPCFlowLogRetention
    ParameterLabels:
      VPCCIDR:
        default: Custom VPC CIDR
      TagPrefixer:
        default: Custom Resource Tag
      InstanceSize:
        default: Instance Size
      KeyName:
        default: EC2 Key Pair
      OpenUse:
        default: Open Access?
      OpenVPNASAccessIP:
        default: OpenVPN AS Management IP
      OpenVPNASAdminUser:
        default: OpenVPN AS Admin Username
      OpenVPNASAdminPW:
        default: OpenVPN AS Admin Password
      VPCFlowLogRetention:
        default: VPC Flow Log Retention.
# Help for CloudFormation Parameters
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  VPCCIDR:
    Description: Enter a custom CIDR for your OpenVPN AS VPC using the first two octets.
    Type: String
    Default: 10.10.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\."
    ConstraintDescription: 'Choose the first two octets of a CIDR. i.e. 10.10.'
  TagPrefixer:
    Description: Enter your own tag prefix to help identify resources created by this stack. eg. OPENVPNAS-
    Type: String
    Default: OPENVPNAS-
    # Generally allowed characters for AWS TAGs are: letters, spaces, and numbers representable in UTF-8, plus the following special characters: + - = . _ : / @. (Ref: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
    # [\.\-_/#A-Za-z0-9]+ Required for AWS::Logs::LogGroup
    AllowedPattern: "[\\w\\-\\/\\.]*"
  InstanceSize:
    Description: Choose an instance size. Deafult is AWS Free Tier Eligible t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
  KeyName:
    Description: REQUIRED - Select an EXISTING EC2 key pair to launch this OpenVPN AS instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: 'You must choose the name of an existing EC2 KeyPair'
  OpenUse:
    Description: If you have endpoints that receive public IPs via DHCP or are mobile devices choose YES for this.
    Default: 'NO'
    Type: String
    AllowedValues:
    - 'YES'
    - 'NO'
    ConstraintDescription: You must specify YES or NO. 
  OpenVPNASAccessIP:
    Description: Enter the IP address that will be used to manage this instance. Use 0.0.0.0/0 at your own peril.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default : 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})(/32|/0)"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
  OpenVPNASAdminUser:
    Description: Avoid using the default 'openvpnas' username.
    Type: String
    MinLength: 4
    MaxLength: 20
    Default: ChangeMeBoneHead
    AllowedPattern: "([A-Za-z0-9-]*)"
    ConstraintDescription: Name must only contain alphanumeric characters between 4 and 20 characters.
  OpenVPNASAdminPW:
    Description: "Between 10 and 50 alphanumeric characters. You can use special symbols @ * #"
    NoEcho: true
    Type: String
    # No documentation on password complexity here: https://docs.openvpn.net/docs/access-server/openvpn-access-server-command-line-tools.html
    MinLength: 10
    MaxLength: 50
    AllowedPattern: "([a-zA-Z0-9@*#]*)"
    ConstraintDescription: Password must be between 10 and 50 characters. You can use all alphanumeric characters and the special symbols @ * #
  VPCFlowLogRetention:
    # Information source: Ref: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records
    Description: Select the number of days to retain VPC Flow Logs.
    Type: Number
    Default: '14'
    AllowedValues:
    - '7'
    - '14'
    - '30'
    - '60'
    - '120'
    - '150'
    - '180'
    - '365'
    - '400'
    - '545'
    - '731'
    - '1827'
    - '3653'
# Help for CloudFormation Mappings
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:
  RegionMap:  
    # Asia Pacific (Mumbai)
    ap-south-1:
      BYOLAMI: ami-066f1b69
    # EU (London)
    eu-west-2:
      BYOLAMI: ami-86c3c9e2   
    # EU (Ireland)
    eu-west-1:
      BYOLAMI: ami-07783674   
    # Asia Pacific (Seoul)
    ap-northeast-2:
      BYOLAMI: ami-b6e733d8
    # Asia Pacific (Tokyo)
    ap-northeast-1:
      BYOLAMI: ami-2f66c04e   
    # South America (SÃ£o Paulo)
    sa-east-1:
      BYOLAMI: ami-283fa244    
    # Canada (Central)
    ca-central-1:
      BYOLAMI: ami-24ad1f40    
    # Asia Pacific (Singapore)
    ap-southeast-1:
      BYOLAMI: ami-d72a8cb4   
    # Asia Pacific (Sydney)
    ap-southeast-2:
      BYOLAMI: ami-5e3b063d    
    # EU (Frankfurt)
    eu-central-1:
      BYOLAMI: ami-3f788150    
    # US East (N. Virginia)
    us-east-1:
      BYOLAMI: ami-44aaf953    
    # US East (Ohio)
    us-east-2:
      BYOLAMI: ami-ae3e64cb    
    # US West (N. California)
    us-west-1:
      BYOLAMI: ami-fa105b9a    
    # US West (Oregon)
    us-west-2:
      BYOLAMI: ami-e8d67288
# If using China or GovCloud will need to find your AMI.
#    # China Beijing
#    cn-north-1:
#      BYOLAMI: ami-XXXXXXXX
#    # AWS GovCloud
#    us-gov-west-1:
#      BYOLAMI: ami-XXXXXXXX    
Conditions:
  CreateOpenOpenVPNSG: !Equals [ !Ref OpenUse, YES ]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::Join:
        - ''
        - - Ref: VPCCIDR
          - '0'
          - ".0"
          - "/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - VPC
#### Section 105
  # S3 VPC Endpoints to get Ubuntu updates via AWS Internal network and save $$$ on network bandwidth.
  S3Endpoint:
    DependsOn:
    - PublicRouteTable
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AmazonLinuxRepositoryAccess
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          Resource:
          - arn:aws:s3:::packages.*.amazonaws.com/*
          - arn:aws:s3:::repo.*.amazonaws.com/*
      RouteTableIds: 
       - !Ref 1aPrivateRouteTable
       - !Ref PublicRouteTable
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref VPC
  1aVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::Join:
        - ''
        - - Ref: VPCCIDR
          - '0'
          - ".0"
          # Limit amount of IPs available because not needed; /28 is the smallest AWS allows
          - "/28"
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-INTERNET
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-INTERNET-ROUTE
  1aPublicSubnetAssociate:
    DependsOn:
    - 1aVPCPublicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  1aPrivateSubnetAssociateInside:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPrivateSubnet
      RouteTableId:
        Ref: 1aPrivateRouteTable
#### Section 300:          
  1aVPCPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock:
        Fn::Join:
        - ''
        - - Ref: VPCCIDR
          - '1'
          - ".0"
          # Limit amount of IPs available because not needed.
          - "/28"
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-PRIVATE
  1aPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - 1a-PRIVATE-ROUTE
  # Help for CloudFormation EC2 Route
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  1aPrivateRoute:
    DependsOn:
    - OpenVPNASInstance
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: 1aPrivateRouteTable
      InstanceId:
        Ref: OpenVPNASInstance          
#### Section 400
  # Help for CloudFormation NAT Gateway
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
  EIP:
    DependsOn:
    - OpenVPNASInstance
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref OpenVPNASInstance
  1aInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCInternetGateway
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - IGW
  VPCInternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VPCInternetGateway
      VpcId:
        Ref: VPC
#### Section 500
  #Create a SG that doesn't have Ingress rules and only allows Egress 80 and 443.
  OpenVPNASAdminConsoleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access OpenVPN AS Admin Console
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
         Ref: OpenVPNASAccessIP
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-ADMIN-CONSOLE
      VpcId:
        Ref: VPC
  SSHOpenVPNASSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access OpenVPN AS via SSH
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
         Ref: OpenVPNASAccessIP
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-SSH-ACCESS
      VpcId:
        Ref: VPC
  OpenVPNVPNASSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPN Access to OpenVPN AS
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: '1194'
        ToPort: '1194'
        CidrIp: !If [CreateOpenOpenVPNSG, 0.0.0.0/0, !Ref OpenVPNASAccessIP]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-VPN-ACCESS
      VpcId:
        Ref: VPC       
#### Section 600  
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - PUBLIC-OPENVPN-NACL
  InboundPublicSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 100
  InboundPublicHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 110
  InboundPublicHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 120
  InboundPublicOpenVPNNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: False
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '1194'
        To: '1194'
      Protocol: 17
      RuleAction : allow
      RuleNumber : 130
  InboundPublicRepliesNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PublicNetworkAcl
      # Help for Ephemeral ports and how to use
      # http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 140
  OutboundPublicSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 100
  OutboundPublicHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 110
  OutboundPublicHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 120
  OutboundPublicOpenVPNNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '1194'
        To: '1194'
      Protocol: 17
      RuleAction : allow
      RuleNumber : 130
  PublicSSMOutboundRepliesNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        # Be careful here. NAT Gateway requires 1024 ~ 65535. Ref: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports
        # AWS example shows 49152 ~ 65535.
        From: '1024'
        To: '65535'
      Protocol: 6
      RuleAction : allow
      RuleNumber : 140
  PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: 1aVPCPublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
#### Section 700
  # Help for CloudFormation EC2 Instance
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  OpenVPNASInstance:
    DependsOn:
    - OpenVPNInstanceRole
    - S3Endpoint
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceSize
      IamInstanceProfile:
        Ref: OpenVPNInstanceProfile
      KeyName:
        Ref: KeyName
      PrivateIpAddress: !Join [ "", [Ref: VPCCIDR, "0", ".5"]]
      SourceDestCheck: false
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", BYOLAMI ]
      SecurityGroupIds:
        - Ref: OpenVPNASAdminConsoleSG
        - Ref: SSHOpenVPNASSG
        - Ref: OpenVPNVPNASSG
      SubnetId:
        Ref: 1aVPCPublicSubnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: TagPrefixer
            - OPENVPN-AS-INSTANCE
      UserData:
        Fn::Base64: !Sub |     # No more Fn::Join needed
          #!/bin/bash -xe
          cd /tmp
          wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
          dpkg -i amazon-ssm-agent.deb
          systemctl enable amazon-ssm-agent
          rm amazon-ssm-agent.deb
          admin_user=${OpenVPNASAdminUser}
          admin_pw=${OpenVPNASAdminPW}
          reroute_gw=1
          reroute_dns=1
          /usr/local/openvpn_as/scripts/sacli --key vpn.client.tls_version_min --value 1.2 ConfigPut
          /usr/local/openvpn_as/scripts/sacli --key vpn.client.tls_version_min_strict --value true ConfigPut
          /usr/local/openvpn_as/scripts/sacli --key vpn.server.tls_version_min --value 1.2 ConfigPut
          /usr/local/openvpn_as/scripts/sacli --key vpn.server.google_auth.enable --value true ConfigPut
          /usr/local/openvpn_as/scripts/sacli start
          apt-get update -y && apt-get upgrade -y
  OpenVPNInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - "-"
          - Fn::Join:
            - ''
            - - Ref: TagPrefixer
              - OPENVPN-AS-INSTANCE-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  OpenVPNInstanceProfile:
    DependsOn:
    - OpenVPNInstanceRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: OpenVPNInstanceRole                
#### Section 800
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - "-"
          - Fn::Join:
            - ''
            - - Ref: TagPrefixer
              - OPENVPN-AS-VPC-FLOW-LOGS
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - vpc-flow-logs.amazonaws.com
          Action:
          - sts:AssumeRole
  FlowLogsRolePolicy:
    DependsOn:
    - VPCFlowLogsRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-VPC-FLOW-LOGS
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Resource: "*"
      Roles:
      - Ref: VPCFlowLogsRole
  VPCFlowLogsGroup:
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-VPC-FLOW-LOGS-GROUP
      RetentionInDays:
        Ref: VPCFlowLogRetention
  VPCFlowLogs:
    DependsOn:
    - VPCFlowLogsGroup
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn:
        Fn::GetAtt:
        - VPCFlowLogsRole
        - Arn
      LogGroupName:
        Ref: VPCFlowLogsGroup
      ResourceId:
        Ref: VPC
      ResourceType: VPC
      TrafficType: ALL
#### Section 900
  CloudWatchMetricsPolicy:
    DependsOn:
      - OpenVPNInstanceRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-CLOUDWATCH-METRICS
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          - cloudwatch:PutMetricData
          Resource:
          - "*"
        - Sid: Stmt1454327816000
          Effect: Allow
          Action:
          - ec2:DescribeTags
          Resource:
          - "*"
      Roles:
      - Ref: OpenVPNInstanceRole
  InstanceCWLogsPolicy:
    DependsOn:
    - OpenVPNInstanceRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: TagPrefixer
          - OPENVPN-AS-CLOUDWATCH-LOGS
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          - cloudwatch:PutMetricData
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource: "*"
      Roles:
      - Ref: OpenVPNInstanceRole
# Help for CloudFormation Outputs
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  1aOpenVPNEIPName:
    Description: Admin Login URL
    Value: !Join [ "", [ "https://", Ref: EIP, "/admin" ] ]